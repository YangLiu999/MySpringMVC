使用自定义框架
	1.删除测试代码，导出jar包
	2.新建项目，导入jar包和依赖包
	3.在web.xml中对框架前端控制器进行配置
		 <servlet>
		    <servlet-name>DispatcherServlet</servlet-name>
		    <servlet-class>com.woniuxy.myspringmvc.core.DispatcherServlet</servlet-class>
		  	<init-param>
		  		<param-name>config</param-name>
		  		<param-value>application.properties</param-value>
		  	</init-param>
		  	<load-on-startup>1</load-on-startup>
		  </servlet>
		  <servlet-mapping>
		    <servlet-name>DispatcherServlet</servlet-name>
		    <url-pattern>/controller/*</url-pattern>

使用说明
	注解
		@Controller：：有此注解通过RequestMapping中的映射执行方法
		@ResponseBody：需要响应内容到客户端，格式为JSON
		@RequestMapping：为类和方法配置映射
		@ResponseForward:此方法需要请求转发，相对路径
		@ResponseRedirect:重定向，相对路径或者绝对路径
	
	core
		DispatcherServlet
			变量
				//创建成员变量接收Properties对象
				private Properties application;
				//集合存controller类全名
				private List<String> classNames = new ArrayList<>();
				//创建处理器映射对象
				private HandlerMapper handlerMapper;
				//创建处理器适配器对象
				private HandlerAdapter handlerAdapter;
			方法
				String doLoadConfig()：查找配置文件获取包名方法
				doScanner(String packageName)：扫描包下所有类文件，获取所有类全名
		HandlerMapper
			变量
				//map存储有controller注解的对象
				private Map<String, Object> ioc = new HashMap<>();
				// map存储请求映射与controller对应关系
				private Map<String, Object> controllerMapping = new HashMap<>();
				// map存储请求映射与Method对应关系
				private Map<String, Method> methodMapping = new HashMap<>();
			方法		
				Map<String, Object> doInstance(List<String> classNames)
					遍历看对象是否存在controller注解，存在则创建对象并按类名小驼峰形式作为键，对象作为值方式存储
				initMapping()
					映射关系建立
		HandlerAdapter
			变量
				private HandlerMapper handlerMapper;
			方法
				Object adapter(HttpServletRequest request, HttpServletResponse response)
					当客户端发起请求时，根据请求映射找到对应controller对象与Method对象，并执行；
				Object parse(String[] methodParamVals, Class<?> methodParamTypeCl)
					类型转化方法